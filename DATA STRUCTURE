(https://leetcode.com/problems/search-insert-position/int *nums,int numsize,int target)
int searchInsert
{
    //Binary Search 
    int l=0;
    int h=numsize-1;
    while(l<=h)
    {
        int mid=(l+h)/2;
        if(nums[mid]<target)
        {
         l=mid+1;
        }
         else if(nums[mid]>target)
         {
         h=mid-1;
         }
         else
         {
          return mid;
         }
    }
    return l;
}



2
https://leetcode.com/problems/valid-sudoku/


#define vb vector<bool>
#define vvc vector<vector<char>>
class Solution {
public:
    void hash_setter (vb &hash){
        for (int i = 0; i < 10; i++) hash[i] = 0;
    }    
    
    bool row_check (vvc &board){
        vb hash (10, 0);
        
        for (int i = 0; i < 9; i++){
            for (int j = 0; j < 9; j++){
                if (board[i][j] == '.') continue;
                if (hash[board[i][j]-'0']) return 0;
                
                hash[board[i][j]-'0'] = 1;
            }
            
            hash_setter (hash);
        }
        
        return 1;
    }
    
    bool col_check (vvc &board){
        vb hash (10, 0);
        
        for (int i = 0; i < 9; i++){
            for (int j = 0; j < 9; j++){
                if (board[j][i] == '.') continue;
                if (hash[board[j][i]-'0']) return 0;
                
                hash[board[j][i]-'0'] = 1;
            }
            
            hash_setter (hash);
        }
        
        return 1;
    }
    
    bool sub_box_check (vvc &board, int i, int j){
        vb hash (10,0);
        
        for (int k = i; k < i+3; k++){
            for (int l = j; l < j+3; l++){
                if (board[k][l] == '.') continue;
                if (hash[board[k][l]-'0']) return 0;
                
                hash[board[k][l]-'0'] = 1;
            }
        }
        
        return true;
    }
    
    bool sub_box_generate (vvc &board){
        for (int i = 0; i < 9; i+=3){
            for (int j = 0; j < 9; j+=3){
                if (sub_box_check (board, i, j) == 0) return 0;
            }
        }
        
        return 1;
    }
    
    
    bool isValidSudoku(vector<vector<char>>& board) { 
        if (!row_check (board) || !col_check (board) || !sub_box_generate (board)) return 0;
        
        return 1;
    }
};



3
https://leetcode.com/problems/valid-sudoku/

bool isValidSudoku(char** board, int boardSize, int* boardColSize) {
    bool check[9] = {false};
    int i, j;

    // ROW CHECKS !!
    for (i = 0; i < 9; i++) {
        for (j = 0; j < 9; j++) {
            if (board[i][j] >= '0' && board[i][j] <= '9') {
                if (check[board[i][j] - '1'] == true)
                    return false;
                else
                    check[board[i][j] - '1'] = true;
            }
        }
        memset(check, 0, sizeof(check));
    }

    // COLUMNS CHECKS !!
    for (i = 0; i < 9; i++) {
        for (j = 0; j < 9; j++) {
            if (board[j][i] >= '0' && board[j][i] <= '9') {
                if (check[board[j][i] - '1'] == true)
                    return false;
                else
                    check[board[j][i] - '1'] = true;
            }
        }
        memset(check, 0, sizeof(check));
    }

    // 3x3 BOXES CHECKS !!
    int boxRow = 0 , boxCol = 0;
    for(boxRow = 0; boxRow < 9; boxRow +=3 ){
        for(boxCol = 0; boxCol < 9; boxCol +=3){
            for(i = 0; i < 3; i++){
                for(j = 0; j < 3; j++){
                    if(board[boxRow+i][boxCol+j] >= '0' && board[boxRow+i][boxCol+j] <= '9'){
                        if(check[board[boxRow+i][boxCol+j] - '1'] == true)
                            return false;
                        else
                            check[board[boxRow+i][boxCol+j] - '1'] = true;
                    }
                }
            }
            memset(check, 0, sizeof(check));
        }
    }

    return true;    
}


4

https://leetcode.com/problems/sudoku-solver/

bool isValid(vector<vector<char>>& board, int row, int col, char c) {
    // row check
    for(int i = 0; i < 9; i++) 
		if(board[i][col] == c) 
			return false;
	// col check
    for(int i = 0; i < 9; i++) 
		if(board[row][i] == c) 
			return false;
    // box check
    int x0 = (row/3) * 3, y0 = (col/3) * 3;
    for(int i = 0; i < 3; i++) {
        for(int j = 0; j < 3; j++) {
            if(board[x0 + i][y0 + j] == c) return false;
        }
    }
    return true;
}

bool helper(vector<vector<char>> &board, int row, int col) {
    // done
    if(row == 9) 
		return true;
    // time for next row
    if(col == 9) 
		return helper(board, row + 1, 0);
    // already marked
    if(board[row][col] != '.') 
		return helper(board, row, col + 1);

    for(char c = '1'; c <= '9'; c++) {
        if(isValid(board, row, col, c)) {
            board[row][col] = c;
            // without return here, the board reverts to initial state
            if(helper(board, row, col + 1))
				return true;
            board[row][col] = '.';
        }
    }
    return false;
}

void solveSudoku(vector<vector<char>>& board) {
    helper(board, 0, 0);
}

5

https://leetcode.com/problems/combination-sum/

class Solution {
public:
    vector<vector<int>>ans;
    vector<int>ok;
    void call(int pos,int n,vector<int>&v){
        if(n==0){
            ans.push_back(ok);
            return ;
        }
        if(n<0)return;
        for(int i=pos;i<v.size();i++)
        {
            ok.push_back(v[i]);
            call(i,n-v[i],v);
            ok.pop_back();
        }
        return;
    }
    vector<vector<int>> combinationSum(vector<int>& v, int n) {
        call(0,n,v);
        return ans;
    }
};

6
https://leetcode.com/problems/combination-sum-ii/
void findCombinations(int ind,int n,vector<int>& candidates,vector<int>v,vector<vector<int>>&ans,int target)
{
    if(ind>=n || target == 0)
    {
        if(target == 0)
        {
            ans.push_back(v);
        }
        return;
    }
    
    for(int i = ind;i<n;i++)
    {
        // here i > ind and not i-1>=0 ? because we could chose the same no. twice
        // if it occurs twice in the array and if it's chosen for a different position
        // eg. {1,1,2} if target == 4 
        if(i > ind && candidates[i-1] == candidates[i])
        {
            continue;
        }
        
        // because array is sorted and all numbers ahead of candidates[i] will anyway
        // be > target
        if(candidates[i] > target)
        {
            break;
        }
        
        v.push_back(candidates[i]);
        findCombinations(i+1,n,candidates,v,ans,target-candidates[i]);
        v.pop_back();
		// v.pop_back() is necessary because of ?
		// when this option backtrack to here, remove this and go on to the next option
        // so after we've completed this call and processed it's result at base case
        // we don't wanna let current vector interfere with next "fresh" function call
    }
}

vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
    int n = candidates.size();
    
    sort(candidates.begin(),candidates.end());
    // sorting the input array is necessary to gather all the duplicates together 
    // so that it becomes easy to avoid duplicate values taken for the ith number
    // for eg. 1st no. is chosen as 1 then it can't be chosen as 1st no. again,
    
    // though it can be chosen as 2nd no. explained at line 17
    
    vector<int>v;
    vector<vector<int>>ans;
    
    findCombinations(0,n,candidates,v,ans,target);
    
    return ans;
}


7
https://leetcode.com/problems/first-missing-positive/

class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        int n = nums.size();
        for(int i = 0; i < n; ++i)
            if(nums[i] <= 0 || nums[i] > n)
                nums[i] = n + 2;
        for(int i = 0; i < n; ++i){
            if(abs(nums[i]) == n + 2)
                continue;
            if(nums[abs(nums[i]) - 1] > 0)
                nums[abs(nums[i]) - 1] *= -1;
        }
        for(int i = 0; i < n; ++i){
            if(nums[i] > 0)
                return i + 1;
        }
        return n + 1;
    }
};

8
https://leetcode.com/problems/trapping-rain-water/
class Solution {
public:
    int trap(vector<int>& h) {   
        int n = h.size();
        vector<int> right_max(n,0);
        int ans=0;
        int mx=INT_MIN;
        int maxi=INT_MIN, ind=-1;
        for(int i=n-1;i>=0;i--)
        {
            maxi = max(h[i],maxi);
            right_max[i] = maxi;
        }
        for(int i=0;i<n;i++)
        {
            mx = max(mx,h[i]);         
            ans += (min(mx,right_max[i])-h[i]);
        }
        return ans;
    }
};

9
https://leetcode.com/problems/multiply-strings/
class Solution {
public:
    string multiply(string num1, string num2) {
        if (num1 == "0" || num2 == "0") return "0";
        
        vector<int> res(num1.size()+num2.size(), 0);
        
        for (int i = num1.size()-1; i >= 0; i--) {
            for (int j = num2.size()-1; j >= 0; j--) {
                res[i + j + 1] += (num1[i]-'0') * (num2[j]-'0');
                res[i + j] += res[i + j + 1] / 10;
                res[i + j + 1] %= 10;
            }
        }
        
        int i = 0;
        string ans = "";
        while (res[i] == 0) i++;
        while (i < res.size()) ans += to_string(res[i++]);
        
        return ans;
    }
};
